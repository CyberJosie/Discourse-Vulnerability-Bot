
import os
import json
import time
from datetime import datetime

from attr import validate
from cvebot.CVEScout import CVEScout
from pydiscourse import DiscourseClient

def timestamp():
        now = datetime.now()
        return now.strftime('%Y-%m-%d')

class DiscourseCVEBot:

    def __init__(self, url, username, api_key):
        self.url = url
        self.user = username
        self.api_key = api_key

        self.client = DiscourseClient(
            self.url,
            api_username = self.user,
            api_key = self.api_key
        )
    

    # creates a readable paragraph from a dictionary
    # this function will take in CVE dictionary from database API
    # and return a string format with filtered results suitible for blog post
    # append all post formatting changed here!
    # 
    # ARGS: Can be passed a single cve or list of cves.
    def readable(self, elements):
        readable_text = ''
        
        # allowed for a list or dict
        elements = list(elements)

        for element in elements:
            # get only the wanted values and create a new dictionary from it
            element = {
                "Id": element['id'],
                "Modified": element['Modified'],
                "Published": element['Published'],
                "Assigner": element['assigner'],
                "References": str('\n'.join(element['references'])),
                "Summary": element['summary']
            }
            
            # create a readable line from each key:value pair
            # add line to post separated by newline
            for key in list(element.keys()):

                value = str(element[key])
                readable_text += f'{str(key)}: {value}\n'
            
            readable_text+='\n\n'
            
        
        return readable_text
            
    # reads a JSON-formatted file and returns a dictionary
    def read_json(self, file_path):
        try:
            f = open(file_path, 'r')
            content = f.read()
            f.close()
            return json.loads(content)
        except Exception as e:
            print(e)
            return {}
    
    # writes a dictionary to a JSON-formatted file
    def write_json(self, file_path, dictionary):
    
        try:
            f = open(file_path, 'w')
            content = f.write(json.dumps(dictionary, indent=2))
            f.close()
        except Exception as e:
            print(e)
    
    # gets categories from Discourse API
    # if no args are specified, you will get all data
    # if args are specified, it will return the value for reach key (args) you add
    # Example: get_categories('name'. 'id') -> {'name':'val','id':'val'}
    def get_categories(self, *filters):

        categories = self.client.categories()
        filtered_results = []

        if len(filters) == 0:
            return categories
        
        for category in categories:
            new_category = {}
            for filter in filters:
                if str(filter) in list(category.keys()):
                    new_category[str(filter)] = category[filter]
            filtered_results.append(new_category)
        
        return filtered_results
    
    # implicitly gets categories from API and returns the ID for a given category if exists
    # if category does not exist, will return -1
    def category_id_from_name(self, category_name):
        data = self.get_categories('name', 'id')

        # returns -1 if not found
        ctg_id = -1

        for ctg in data:
            if ctg['name'] == category_name.strip():
                ctg_id = ctg['id']
                break
        
        return ctg_id
    
    # created a post on the forum. Must be properly formatted, returns nothing.
    def create_post(self, title, content, category_name):        
        category_id = self.category_id_from_name(category_name)
        print(f'Posting: {title}...')
        self.client.create_post(content=content, category_id=str(category_id), topic_id=None, title=title)
        print(f'Posted!')
    
    def cve_daemon(self):

        api = CVEScout()

        while True:

            today = timestamp()
            todays_cves = []
            recent_count = 30

            print(f'Getting {recent_count} recent CVEs...', end='', flush=True)
            recent_cve = api.get_recent(10)
            print(f' Done. ')

            # check if there is a previous save
            if not os.path.isfile(f'.recent'):

                # if there was none, post the top 10 recent
                todays_cves = recent_cve[:4]
                
                # save todays query
                self.write_json('.recent', recent_cve)

            else:
                # load the history
                last_query = self.read_json('.recent')
                new_cves = []
                for cve in recent_cve:

                    if cve not in last_query:
                        new_cves.append(cve)
                
                todays_cves = new_cves
                new_cves = []

            

            post_content = self.readable(todays_cves)
            print(post_content)
                
            # post todays cves
            self.create_post(
                title=f'CVE List for {today} - Latest Vulnerabilities',
                content=post_content,
                category_name="Vulnerability"
            )

            print(f'Sleeping...')
            time.sleep(86400)

